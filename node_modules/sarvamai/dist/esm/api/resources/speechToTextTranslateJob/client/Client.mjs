/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as SarvamAI from "../../../index.mjs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.mjs";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.mjs";
export class SpeechToTextTranslateJob {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Get a job uuid, and storage folder details for speech to text tranlsate bulk job v1
     *
     * @param {SarvamAI.SpeechToTextTranslateJobRequest} request
     * @param {SpeechToTextTranslateJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextTranslateJob.initialise({
     *         job_parameters: {}
     *     })
     */
    initialise(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__initialise(request, requestOptions));
    }
    __initialise(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const { ptu_id: ptuId } = request, _body = __rest(request, ["ptu_id"]);
            const _queryParams = {};
            if (ptuId != null) {
                _queryParams["ptu_id"] = ptuId.toString();
            }
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "speech-to-text-translate/job/v1"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text-translate/job/v1.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get the status of a speech to text translate bulk job V1
     *
     * @param {string} jobId - The unique identifier of the job
     * @param {SpeechToTextTranslateJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextTranslateJob.getStatus("job_id")
     */
    getStatus(jobId, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getStatus(jobId, requestOptions));
    }
    __getStatus(jobId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, `speech-to-text-translate/job/v1/${encodeURIComponent(jobId)}/status`),
                method: "GET",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling GET /speech-to-text-translate/job/v1/{job_id}/status.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Start a speech to text translate bulk job V1
     *
     * @param {string} jobId - The unique identifier of the job
     * @param {SarvamAI.SpeechToTextTranslateJobStartRequest} request
     * @param {SpeechToTextTranslateJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextTranslateJob.start("job_id")
     */
    start(jobId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__start(jobId, request, requestOptions));
    }
    __start(jobId_1) {
        return __awaiter(this, arguments, void 0, function* (jobId, request = {}, requestOptions) {
            var _a, _b, _c;
            const { ptu_id: ptuId } = request;
            const _queryParams = {};
            if (ptuId != null) {
                _queryParams["ptu_id"] = ptuId.toString();
            }
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, `speech-to-text-translate/job/v1/${encodeURIComponent(jobId)}/start`),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text-translate/job/v1/{job_id}/start.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Start a speech to text bulk job V1
     *
     * @param {SarvamAI.SpeechToTextTranslateJobGetUploadLinksRequest} request
     * @param {SpeechToTextTranslateJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextTranslateJob.getUploadLinks({
     *         body: {
     *             job_id: "job_id",
     *             files: ["files"]
     *         }
     *     })
     */
    getUploadLinks(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getUploadLinks(request, requestOptions));
    }
    __getUploadLinks(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const { ptu_id: ptuId, body: _body } = request;
            const _queryParams = {};
            if (ptuId != null) {
                _queryParams["ptu_id"] = ptuId.toString();
            }
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "speech-to-text-translate/job/v1/upload-files"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text-translate/job/v1/upload-files.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Start a speech to text bulk job V1
     *
     * @param {SarvamAI.SpeechToTextTranslateJobGetDownloadLinksRequest} request
     * @param {SpeechToTextTranslateJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextTranslateJob.getDownloadLinks({
     *         body: {
     *             job_id: "job_id",
     *             files: ["files"]
     *         }
     *     })
     */
    getDownloadLinks(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getDownloadLinks(request, requestOptions));
    }
    __getDownloadLinks(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const { ptu_id: ptuId, body: _body } = request;
            const _queryParams = {};
            if (ptuId != null) {
                _queryParams["ptu_id"] = ptuId.toString();
            }
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "speech-to-text-translate/job/v1/download-files"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text-translate/job/v1/download-files.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const apiSubscriptionKeyValue = (_a = (yield core.Supplier.get(this._options.apiSubscriptionKey))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SARVAM_API_KEY"];
            return { "api-subscription-key": apiSubscriptionKeyValue };
        });
    }
}
