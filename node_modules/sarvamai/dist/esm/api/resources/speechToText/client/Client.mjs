/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as SarvamAI from "../../../index.mjs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.mjs";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.mjs";
export class SpeechToText {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * ## Real-Time Speech to Text API
     *
     * This API transcribes speech to text in multiple Indian languages and English. Supports real-time transcription for interactive applications.
     *
     * ### Available Options:
     * - **Real-Time API** (Current Endpoint): For quick responses under 30 seconds with immediate results
     * - **Batch API**: For longer audio files, requires following a notebook script - [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/stt/stt-batch-api)
     *   - Supports diarization (speaker identification)
     *
     * ### Note:
     * - Pricing differs for Real-Time and Batch APIs
     * - Diarization is only available in Batch API with separate pricing
     * - Please refer to [dashboard.sarvam.ai](https://dashboard.sarvam.ai) for detailed pricing information
     *
     * @param {SarvamAI.SpeechToTextTranscriptionRequest} request
     * @param {SpeechToText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToText.transcribe({
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    transcribe(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__transcribe(request, requestOptions));
    }
    __transcribe(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _request = yield core.newFormData();
            yield _request.appendFile("file", request.file);
            if (request.model != null) {
                _request.append("model", request.model);
            }
            if (request.language_code != null) {
                _request.append("language_code", request.language_code);
            }
            const _maybeEncodedRequest = yield _request.getRequest();
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "speech-to-text"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign(Object.assign({}, (yield this._getCustomAuthorizationHeaders())), _maybeEncodedRequest.headers)), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                requestType: "file",
                duplex: _maybeEncodedRequest.duplex,
                body: _maybeEncodedRequest.body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * ## Real-Time Speech to Text Translation API
     *
     * This API automatically detects the input language, transcribes the speech, and translates the text to English.
     *
     * ### Available Options:
     * - **Real-Time API** (Current Endpoint): For quick responses under 30 seconds with immediate results
     * - **Batch API**: For longer audio files, requires following a notebook script - [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/stt-translate/stt-translate-batch-api)
     *   - Supports diarization (speaker identification)
     *
     * ### Note:
     * - Pricing differs for Real-Time and Batch APIs
     * - Diarization is only available in Batch API with separate pricing
     * - Please refer to [dashboard.sarvam.ai](https://dashboard.sarvam.ai) for detailed pricing information
     *
     * @param {SarvamAI.SpeechToTextTranslationRequest} request
     * @param {SpeechToText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToText.translate({
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    translate(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__translate(request, requestOptions));
    }
    __translate(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _request = yield core.newFormData();
            yield _request.appendFile("file", request.file);
            if (request.prompt != null) {
                _request.append("prompt", request.prompt);
            }
            if (request.model != null) {
                _request.append("model", request.model);
            }
            const _maybeEncodedRequest = yield _request.getRequest();
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "speech-to-text-translate"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign(Object.assign({}, (yield this._getCustomAuthorizationHeaders())), _maybeEncodedRequest.headers)), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                requestType: "file",
                duplex: _maybeEncodedRequest.duplex,
                body: _maybeEncodedRequest.body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    case 503:
                        throw new SarvamAI.ServiceUnavailableError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /speech-to-text-translate.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const apiSubscriptionKeyValue = (_a = (yield core.Supplier.get(this._options.apiSubscriptionKey))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SARVAM_API_KEY"];
            return { "api-subscription-key": apiSubscriptionKeyValue };
        });
    }
}
