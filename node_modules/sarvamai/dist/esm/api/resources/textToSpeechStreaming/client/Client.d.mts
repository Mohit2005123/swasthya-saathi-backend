/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import { TextToSpeechStreamingSocket } from "./Socket.mjs";
export declare namespace TextToSpeechStreaming {
    interface Options {
        environment?: core.Supplier<environments.SarvamAIEnvironment | environments.SarvamAIEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiSubscriptionKey?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface ConnectArgs {
        model?: "bulbul:v2" | undefined;
        "Api-Subscription-Key"?: string;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, unknown>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}
export declare class TextToSpeechStreaming {
    protected readonly _options: TextToSpeechStreaming.Options;
    constructor(_options?: TextToSpeechStreaming.Options);
    connect(args?: TextToSpeechStreaming.ConnectArgs): Promise<TextToSpeechStreamingSocket>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "api-subscription-key": string | undefined;
    }>;
}
