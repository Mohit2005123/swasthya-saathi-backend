/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as qs from "qs";
import { SpeechToTextTranslateStreamingSocket } from "./Socket.mjs";
export class SpeechToTextTranslateStreaming {
    constructor(_options = {}) {
        this._options = _options;
    }
    connect() {
        return __awaiter(this, arguments, void 0, function* (args = {}) {
            var _a, _b, _c, _d, _e;
            const queryParams = {};
            if (args["model"] != null) {
                queryParams["model"] = args["model"];
            }
            if (args["high_vad_sensitivity"] != null) {
                queryParams["high_vad_sensitivity"] = args["high_vad_sensitivity"];
            }
            if (args["vad_signals"] != null) {
                queryParams["vad_signals"] = args["vad_signals"];
            }
            let websocketHeaders = {};
            websocketHeaders = Object.assign(Object.assign({}, websocketHeaders), (yield this._getCustomAuthorizationHeaders()));
            if (args["Api-Subscription-Key"] != null) {
                websocketHeaders["Api-Subscription-Key"] = args["Api-Subscription-Key"];
            }
            websocketHeaders = Object.assign(Object.assign({}, websocketHeaders), args["headers"]);
            const apiSubscriptionKeyValue = (_a = (yield core.Supplier.get(this._options.apiSubscriptionKey))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SARVAM_API_KEY"];
            const socket = new core.ReconnectingWebSocket(`${(_b = (yield core.Supplier.get(this._options["baseUrl"]))) !== null && _b !== void 0 ? _b : ((_c = (yield core.Supplier.get(this._options["environment"]))) !== null && _c !== void 0 ? _c : environments.SarvamAIEnvironment.Production).production}/speech-to-text-translate/ws?${qs.stringify(queryParams, { arrayFormat: "repeat" })}`, [`api-subscription-key.${apiSubscriptionKeyValue}`], { debug: (_d = args["debug"]) !== null && _d !== void 0 ? _d : false, maxRetries: (_e = args["reconnectAttempts"]) !== null && _e !== void 0 ? _e : 30 }, websocketHeaders);
            return new SpeechToTextTranslateStreamingSocket({ socket });
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const apiSubscriptionKeyValue = (_a = (yield core.Supplier.get(this._options.apiSubscriptionKey))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SARVAM_API_KEY"];
            return { "api-subscription-key": apiSubscriptionKeyValue };
        });
    }
}
