/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as SarvamAI from "../../../index.mjs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.mjs";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.mjs";
export class Text {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * **Translation** converts text from one language to another while preserving its meaning.
     * For Example: **'मैं ऑफिस जा रहा हूँ'** translates to **'I am going to the office'** in English, where the script and language change, but the original meaning remains the same.
     *
     * Available languages:
     * - **`bn-IN`**: Bengali
     * - **`en-IN`**: English
     * - **`gu-IN`**: Gujarati
     * - **`hi-IN`**: Hindi
     * - **`kn-IN`**: Kannada
     * - **`ml-IN`**: Malayalam
     * - **`mr-IN`**: Marathi
     * - **`od-IN`**: Odia
     * - **`pa-IN`**: Punjabi
     * - **`ta-IN`**: Tamil
     * - **`te-IN`**: Telugu
     *
     * ### Newly added languages:
     * - **`as-IN`**: Assamese
     * - **`brx-IN`**: Bodo
     * - **`doi-IN`**: Dogri
     * - **`kok-IN`**: Konkani
     * - **`ks-IN`**: Kashmiri
     * - **`mai-IN`**: Maithili
     * - **`mni-IN`**: Manipuri (Meiteilon)
     * - **`ne-IN`**: Nepali
     * - **`sa-IN`**: Sanskrit
     * - **`sat-IN`**: Santali
     * - **`sd-IN`**: Sindhi
     * - **`ur-IN`**: Urdu
     *
     * For hands-on practice, you can explore the notebook tutorial on [Translate API Tutorial](https://github.com/sarvamai/sarvam-ai-cookbook/blob/main/notebooks/translate/Translate_API_Tutorial.ipynb).
     *
     * @param {SarvamAI.TranslationRequest} request
     * @param {Text.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     *
     * @example
     *     await client.text.translate({
     *         input: "input",
     *         source_language_code: "auto",
     *         target_language_code: "bn-IN"
     *     })
     */
    translate(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__translate(request, requestOptions));
    }
    __translate(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "translate"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /translate.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Identifies the language (e.g., en-IN, hi-IN) and script (e.g., Latin, Devanagari) of the input text, supporting multiple languages.
     *
     * @param {SarvamAI.LanguageIdentificationRequest} request
     * @param {Text.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     *
     * @example
     *     await client.text.identifyLanguage({
     *         input: "input"
     *     })
     */
    identifyLanguage(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__identifyLanguage(request, requestOptions));
    }
    __identifyLanguage(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "text-lid"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /text-lid.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * **Transliteration** converts text from one script to another while preserving the original pronunciation. For example, **'नमस्ते'** becomes **'namaste'** in English, and **'how are you'** can be written as **'हाउ आर यू'** in Devanagari. This process ensures that the sound of the original text remains intact, even when written in a different script.
     *
     * Transliteration is useful when you want to represent words phonetically across different writing systems, such as converting **'मैं ऑफिस जा रहा हूँ'** to **'main office ja raha hun'** in English letters.
     *
     * **Translation**, on the other hand, converts text from one language to another while preserving the meaning rather than pronunciation. For example, **'मैं ऑफिस जा रहा हूँ'** translates to **'I am going to the office'** in English, changing both the script and the language while conveying the intended message.
     * ### Examples of **Transliteration**:
     * - **'Good morning'** becomes **'गुड मॉर्निंग'** in Hindi, where the pronunciation is preserved but the meaning is not translated.
     * - **'सुप्रभात'** becomes **'suprabhat'** in English.
     *
     * Available languages:
     * - **`en-IN`**: English
     * - **`hi-IN`**: Hindi
     * - **`bn-IN`**: Bengali
     * - **`gu-IN`**: Gujarati
     * - **`kn-IN`**: Kannada
     * - **`ml-IN`**: Malayalam
     * - **`mr-IN`**: Marathi
     * - **`od-IN`**: Odia
     * - **`pa-IN`**: Punjabi
     * - **`ta-IN`**: Tamil
     * - **`te-IN`**: Telugu
     *
     * For hands-on practice, you can explore the notebook tutorial on [Transliterate API Tutorial](https://github.com/sarvamai/sarvam-ai-cookbook/blob/main/notebooks/transliterate/Transliterate_API_Tutorial.ipynb).
     *
     * @param {SarvamAI.TransliterationRequest} request
     * @param {Text.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     *
     * @example
     *     await client.text.transliterate({
     *         input: "input",
     *         source_language_code: "auto",
     *         target_language_code: "bn-IN"
     *     })
     */
    transliterate(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__transliterate(request, requestOptions));
    }
    __transliterate(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const _response = yield core.fetcher({
                url: urlJoin((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : ((_b = (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.SarvamAIEnvironment.Production).base, "transliterate"),
                method: "POST",
                headers: mergeHeaders((_c = this._options) === null || _c === void 0 ? void 0 : _c.headers, mergeOnlyDefinedHeaders(Object.assign({}, (yield this._getCustomAuthorizationHeaders()))), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new SarvamAI.BadRequestError(_response.error.body, _response.rawResponse);
                    case 403:
                        throw new SarvamAI.ForbiddenError(_response.error.body, _response.rawResponse);
                    case 422:
                        throw new SarvamAI.UnprocessableEntityError(_response.error.body, _response.rawResponse);
                    case 429:
                        throw new SarvamAI.TooManyRequestsError(_response.error.body, _response.rawResponse);
                    case 500:
                        throw new SarvamAI.InternalServerError(_response.error.body, _response.rawResponse);
                    default:
                        throw new errors.SarvamAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SarvamAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SarvamAITimeoutError("Timeout exceeded when calling POST /transliterate.");
                case "unknown":
                    throw new errors.SarvamAIError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const apiSubscriptionKeyValue = (_a = (yield core.Supplier.get(this._options.apiSubscriptionKey))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SARVAM_API_KEY"];
            return { "api-subscription-key": apiSubscriptionKeyValue };
        });
    }
}
