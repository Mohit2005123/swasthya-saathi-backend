/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as core from "../../../../core/index.mjs";
import { fromJson, toJson } from "../../../../core/json.mjs";
export class SpeechToTextStreamingSocket {
    constructor(args) {
        this.eventHandlers = {};
        this.handleOpen = () => {
            var _a, _b;
            (_b = (_a = this.eventHandlers).open) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        this.handleMessage = (event) => {
            var _a, _b;
            const data = fromJson(event.data);
            (_b = (_a = this.eventHandlers).message) === null || _b === void 0 ? void 0 : _b.call(_a, data);
        };
        this.handleClose = (event) => {
            var _a, _b;
            (_b = (_a = this.eventHandlers).close) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        };
        this.handleError = (event) => {
            var _a, _b;
            const message = event.message;
            (_b = (_a = this.eventHandlers).error) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(message));
        };
        this.socket = args.socket;
        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);
    }
    /** The current state of the connection; this is one of the readyState constants. */
    get readyState() {
        return this.socket.readyState;
    }
    /**
     * @param event - The event to attach to.
     * @param callback - The callback to run when the event is triggered.
     * Usage:
     * ```typescript
     * this.on('open', () => {
     *     console.log('The websocket is open');
     * });
     * ```
     */
    on(event, callback) {
        this.eventHandlers[event] = callback;
    }
    /** @param params - Object containing audio (base64), sample_rate, and encoding*/
    transcribe(params) {
        var _a, _b;
        this.assertSocketIsOpen();
        const message = {
            audio: {
                data: params.audio,
                sample_rate: (_a = params.sample_rate) !== null && _a !== void 0 ? _a : 16000,
                encoding: (_b = params.encoding) !== null && _b !== void 0 ? _b : "audio/wav"
            }
        };
        this.sendJson(message);
    }
    /** Connect to the websocket and register event handlers. */
    connect() {
        this.socket.reconnect();
        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);
        return this;
    }
    /** Close the websocket and unregister event handlers. */
    close() {
        this.socket.close();
        this.handleClose({ code: 1000 });
        this.socket.removeEventListener("open", this.handleOpen);
        this.socket.removeEventListener("message", this.handleMessage);
        this.socket.removeEventListener("close", this.handleClose);
        this.socket.removeEventListener("error", this.handleError);
    }
    /** Returns a promise that resolves when the websocket is open. */
    waitForOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket.readyState === core.ReconnectingWebSocket.OPEN) {
                return this.socket;
            }
            return new Promise((resolve, reject) => {
                this.socket.addEventListener("open", () => {
                    resolve(this.socket);
                });
                this.socket.addEventListener("error", (event) => {
                    reject(event);
                });
            });
        });
    }
    /** Asserts that the websocket is open. */
    assertSocketIsOpen() {
        if (!this.socket) {
            throw new Error("Socket is not connected.");
        }
        if (this.socket.readyState !== core.ReconnectingWebSocket.OPEN) {
            throw new Error("Socket is not open.");
        }
    }
    /** Send a binary payload to the websocket. */
    sendBinary(payload) {
        this.socket.send(payload);
    }
    /** Send a JSON payload to the websocket. */
    sendJson(payload) {
        const jsonPayload = toJson(payload);
        this.socket.send(jsonPayload);
    }
}
