/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as SarvamAI from "../../../index.js";
export declare namespace TextToSpeechStreamingSocket {
    interface Args {
        socket: core.ReconnectingWebSocket;
    }
    type Response = SarvamAI.AudioOutput | SarvamAI.ErrorResponse;
    type EventHandlers = {
        open?: () => void;
        message?: (message: Response) => void;
        close?: (event: core.CloseEvent) => void;
        error?: (error: Error) => void;
    };
}
export declare class TextToSpeechStreamingSocket {
    readonly socket: core.ReconnectingWebSocket;
    protected readonly eventHandlers: TextToSpeechStreamingSocket.EventHandlers;
    private handleOpen;
    private handleMessage;
    private handleClose;
    private handleError;
    constructor(args: TextToSpeechStreamingSocket.Args);
    /** The current state of the connection; this is one of the readyState constants. */
    get readyState(): number;
    /**
     * @param event - The event to attach to.
     * @param callback - The callback to run when the event is triggered.
     * Usage:
     * ```typescript
     * this.on('open', () => {
     *     console.log('The websocket is open');
     * });
     * ```
     */
    on<T extends keyof TextToSpeechStreamingSocket.EventHandlers>(event: T, callback: TextToSpeechStreamingSocket.EventHandlers[T]): void;
    /**
     * Configure the connection with various options including output audio codec.
     */
    configureConnection({ target_language_code, speaker, pitch, pace, loudness, speech_sample_rate, enable_preprocessing, output_audio_codec, output_audio_bitrate, min_buffer_size, max_chunk_length, }: {
        target_language_code: SarvamAI.ConfigureConnection.Data.TargetLanguageCode;
        speaker?: SarvamAI.ConfigureConnection.Data.Speaker;
        pitch?: number;
        pace?: number;
        loudness?: number;
        speech_sample_rate?: number;
        enable_preprocessing?: boolean;
        output_audio_codec?: SarvamAI.ConfigureConnection.Data.OutputAudioCodec;
        output_audio_bitrate?: SarvamAI.ConfigureConnection.Data.OutputAudioBitrate;
        min_buffer_size?: number;
        max_chunk_length?: number;
    }): void;
    convert(text: string): void;
    flush(): void;
    ping(): void;
    /** Connect to the websocket and register event handlers. */
    connect(): TextToSpeechStreamingSocket;
    /** Close the websocket and unregister event handlers. */
    close(): void;
    /** Returns a promise that resolves when the websocket is open. */
    waitForOpen(): Promise<core.ReconnectingWebSocket>;
    /** Asserts that the websocket is open. */
    private assertSocketIsOpen;
    /** Send a binary payload to the websocket. */
    private sendBinary;
    /** Send a JSON payload to the websocket. */
    private sendJson;
}
