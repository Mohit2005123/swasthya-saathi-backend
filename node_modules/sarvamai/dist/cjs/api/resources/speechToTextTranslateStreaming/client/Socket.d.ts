/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core/index.js";
import * as SarvamAI from "../../../index.js";
export declare namespace SpeechToTextTranslateStreamingSocket {
    interface Args {
        socket: core.ReconnectingWebSocket;
    }
    type Response = SarvamAI.SpeechToTextTranslateStreamingResponse;
    type EventHandlers = {
        open?: () => void;
        message?: (message: Response) => void;
        close?: (event: core.CloseEvent) => void;
        error?: (error: Error) => void;
    };
}
export declare class SpeechToTextTranslateStreamingSocket {
    readonly socket: core.ReconnectingWebSocket;
    protected readonly eventHandlers: SpeechToTextTranslateStreamingSocket.EventHandlers;
    private handleOpen;
    private handleMessage;
    private handleClose;
    private handleError;
    constructor(args: SpeechToTextTranslateStreamingSocket.Args);
    /** The current state of the connection; this is one of the readyState constants. */
    get readyState(): number;
    /**
     * @param event - The event to attach to.
     * @param callback - The callback to run when the event is triggered.
     * Usage:
     * ```typescript
     * this.on('open', () => {
     *     console.log('The websocket is open');
     * });
     * ```
     */
    on<T extends keyof SpeechToTextTranslateStreamingSocket.EventHandlers>(event: T, callback: SpeechToTextTranslateStreamingSocket.EventHandlers[T]): void;
    /** @param params - Object containing audio (base64), sample_rate, and encoding */
    translate(params: {
        audio: string;
        sample_rate?: number;
        encoding?: string;
    }): void;
    sendConfigMessage(message: SarvamAI.ConfigMessage): void;
    /** Connect to the websocket and register event handlers. */
    connect(): SpeechToTextTranslateStreamingSocket;
    /** Close the websocket and unregister event handlers. */
    close(): void;
    /** Returns a promise that resolves when the websocket is open. */
    waitForOpen(): Promise<core.ReconnectingWebSocket>;
    /** Asserts that the websocket is open. */
    private assertSocketIsOpen;
    /** Send a binary payload to the websocket. */
    private sendBinary;
    /** Send a JSON payload to the websocket. */
    private sendJson;
}
